* Quick notes

** TODO [#C] do some good breakfast
   SCHEDULED: <2017-02-11 六 14:00>

** TODO [#C] day6 spacemacs
1. helm-ag 搜索之后直接可以 c-c c-e 可以直接开辟一个新的buffer，*并可以进行直接修改*，简直神技。 

** TODO [#C] day6
occur-dwin in occur-mode, has the ability to find all content you search, when you search, you can switch to new-established window
and press 'e' to edit, press c-c c-c when finished, or c-c c-k to abandon.

** TODO [#C] day6
in dired-mode ,you can *C-x c-q* to edit the table of contents

** TODO [#C] day6
flycheck's useful command flycheck-verify-setup, you can find the interpreter and excutor supply condition

** TODO [#C]
# ssdfsdf sdfsdfsd 
# sdfsdfsd sdfsdfsdf 
# sdfsdfsd sdfsdfsd sd 

# hello
# helow

sdfsdf sdfsdfsdfsdf 
u 
unless


# UUUU

# uuuu

# iiii

hhhh

yyyy

** TODO [#C] ubuntu startup hotkeys
| cap->ctrl | dpkg-reconfigure keyboard-configure |
| M-f7      | move-windown                        |
| M-SPC     | window-menu                         |

** TODO [#C] evil 模式下，w 和 b 用来前进、后退一个单词 

** TODO [#C] 学习 elisp
 y*** Welcome to IELM ***  Type (describe-mode) for help.
ELISP> hello
ELISP> 234
234 (#o352, #xea, ?ê)
ELISP> (+ 234 234)
468 (#o724, #x1d4, ?ǔ)
ELISP> (defun add-nums (a b) (+ a b))
add-nums
ELISP> (add-nums 3 4)
7 (#o7, #x7, ?\C-g)
ELISP> (setq my-var 90)
90 (#o132, #x5a, ?Z)

** nil t 相当于boolean false true
ELISP> t
t
ELISP> nil
nil

** null 相当于取反
ELISP> (null t)
nil
ELISP> (null nil)
t

** setq 可以定义多个变量
ELISP> (setq a 10 b 20 c 30)
30 (#o36, #x1e, ?\C-^)
ELISP> (+ a b c)
60 (#o74, #x3c, ?<)

** quote ' 可以定义一个列表
ELISP> '(1 2 3 4)
(1 2 3 4)

** '() 在数值上与false 相当
ELISP> (null '())
t
ELISP> (null (> 3 5))

** cons 
(cons 5 my-lis)
(5 1 2 3)


ELISP> (cons 4 (cons 1 (cons 3)))
ELISP> (cons 4(cons 3 '()))
(4 3)

ELISP> '(4 23)
(4 23)

** car
ELISP> (car my-lis)
1 (#o1, #x1, ?\C-a)
ELISP> my-lis
(1 2 3)

ELISP> (cons 5 my-lis)
(5 1 2 3)

ELISP> my-lis
(1 2 3)

** cdr
ELISP> (cdr my-lis)
(2 3)

** nth
ELISP> (nth 0 my-lis)
1 (#o1, #x1, ?\C-a)
ELISP> (nth 1 my-lis)
2 (#o2, #x2, ?\C-b)
ELISP> (nth 4 my-lis)


** member
ELISP> (member 4 my-lis)
nil
ELISP> (member 3 my-lis)
(3)

ELISP> (defun num-exst (num lst))
num-exst
ELISP> (defun num-exst (num lst) )
num-exst
ELISP> 
(defun num-exst (num lst) (member num lst))
num-exst
ELISP> (num-exst 3 my-lis)
(3)

** TODO [#C] lisp-2017
 ;; let 用来定义局部变量
(defun sum-evens (some-list)
  (let ((sum 0))
    (dolist (num some-list)
      (when (= (mod num 2) 0)
	(setq sum (+ sum num))))
  sum ;; 这里不是很清楚，还应该再看看
  ))

** TODO [#C] elisp
 ;; interactive functions
;; 学习如何使用save-excursion 来暂存鼠标位置
(defun cheap-count-words ()
  (interactive)
  (let ((words 0))
    (save-excursion
      (goto-char (point-min))
      (while (forward-word)
	(setq words (1+ words)))) 
    (message (format "words in buffer: %s" words))
    words)
  )

** TODO [#C] elisp
 ;; 学习一个包ert,6个函数，用来测试 buffer 相关内容
;; - ert-deftest 创建一个测试函数
;; - get-buffer-create 创建并返回一个 buffer
;; - with-current-buffer 一个宏，在当前buffer 中做一些操作
;; - erase-buffer qingchu buffer 所有内容
;; - insert 插入异端字符
;; - should 一个宏，判断
;; - kill-buffer 用来关闭 buffer
(require 'ert)
(ert-deftest count-words-test ()
  (get-buffer-create "*test*")
  (with-current-buffer "*test*"
    (erase-buffer)
    (insert "hello world")
    (should (= (cheap-count-words) 2))
    )
  (kill-buffer "*test*")
    )

** TODO [#C] elisp how to build a minor-mode
;; 自己创建minormode
(defvar boolcase-mode-words '("true" "false")
  "words to capitalize")

(defun boolcase-mode-check ()
  "check if we capitalize or not"
  ;; if it's "e"
  (if (= last-command-event 101)
      (boolcase-mode-fix)))
;; copy-regin-as-kill, copy a region and then store it in the kill ring

(defun boolcase-mode-fix ()
  (save-excursion
    (copy-region-as-kill (point) (progn (backward-sexp) (point)))
    (when (member (current-kill 0) boolcase-mode-words)
      (capitalize-word 1))
    ;; Remove element we just save from kill ring
    (setq kill-ring (cdr kill-ring))))

(define-minor-mode boolcase-mode
  "automatically capitalize booleans"
  :lighter " BC"

  (if boolcase-mode
      (add-hook 'post-self-insert-hook
		'boolcase-mode-check nil t)
    (remove-hook 'post-self-insert-hook
		 'boolcase-mode-check t)))

True
False

yese
lse
Falseeee

** TODO [#C] day10

[tips]try your best to use cask to manage your pkgs
Author teaches how to make your emacs more stronger by cask.


